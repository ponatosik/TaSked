// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaSked.Infrastructure.Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaSked.Domain.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("TaSked.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TaSked.Domain.Homework", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BriefSummary")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("TaSked.Domain.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ActivationCount")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxActivations")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("TaSked.Domain.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("TaSked.Domain.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("TaSked.Domain.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("TaSked.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaSked.Domain.Announcement", b =>
                {
                    b.HasOne("TaSked.Domain.Group", null)
                        .WithMany("Announcements")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("TaSked.Domain.Homework", b =>
                {
                    b.HasOne("TaSked.Domain.Subject", null)
                        .WithMany("Homeworks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TaSked.Domain.Comment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AuthorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("HomeworkId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("AuthorId");

                            b1.HasIndex("HomeworkId");

                            b1.ToTable("HomeworkComments", (string)null);

                            b1.HasOne("TaSked.Domain.User", "Author")
                                .WithMany()
                                .HasForeignKey("AuthorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("HomeworkId");

                            b1.Navigation("Author");
                        });

                    b.OwnsMany("TaSked.Domain.RelatedLink", "RelatedLinks", b1 =>
                        {
                            b1.Property<Guid>("HomeworkId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("HomeworkId", "__synthesizedOrdinal");

                            b1.ToTable("Homework");

                            b1.ToJson("RelatedLinks");

                            b1.WithOwner()
                                .HasForeignKey("HomeworkId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("RelatedLinks");
                });

            modelBuilder.Entity("TaSked.Domain.Invitation", b =>
                {
                    b.HasOne("TaSked.Domain.Group", null)
                        .WithMany("Invitations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaSked.Domain.Lesson", b =>
                {
                    b.HasOne("TaSked.Domain.Subject", null)
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TaSked.Domain.RelatedLink", "OnlineLessonUrl", b1 =>
                        {
                            b1.Property<Guid>("LessonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("LessonId");

                            b1.ToTable("Lesson");

                            b1.ToJson("OnlineLessonUrl");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("OnlineLessonUrl");
                });

            modelBuilder.Entity("TaSked.Domain.Subject", b =>
                {
                    b.HasOne("TaSked.Domain.Group", null)
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TaSked.Domain.Comment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AuthorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("SubjectId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("AuthorId");

                            b1.HasIndex("SubjectId");

                            b1.ToTable("SubjectComments", (string)null);

                            b1.HasOne("TaSked.Domain.User", "Author")
                                .WithMany()
                                .HasForeignKey("AuthorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SubjectId");

                            b1.Navigation("Author");
                        });

                    b.OwnsMany("TaSked.Domain.RelatedLink", "RelatedLinks", b1 =>
                        {
                            b1.Property<Guid>("SubjectId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SubjectId", "__synthesizedOrdinal");

                            b1.ToTable("Subject");

                            b1.ToJson("RelatedLinks");

                            b1.WithOwner()
                                .HasForeignKey("SubjectId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("RelatedLinks");
                });

            modelBuilder.Entity("TaSked.Domain.Teacher", b =>
                {
                    b.HasOne("TaSked.Domain.Subject", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TaSked.Domain.RelatedLink", "OnlineMeetingUrl", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teacher");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.Navigation("OnlineMeetingUrl");
                });

            modelBuilder.Entity("TaSked.Domain.User", b =>
                {
                    b.HasOne("TaSked.Domain.Group", null)
                        .WithMany("Members")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("TaSked.Domain.GroupRole", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<byte>("AccessLevel")
                                .HasColumnType("smallint");

                            b1.Property<string>("RoleName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("TaSked.Domain.Group", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Invitations");

                    b.Navigation("Members");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TaSked.Domain.Subject", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Lessons");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
